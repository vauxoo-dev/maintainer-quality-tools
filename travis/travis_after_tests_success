#!/usr/bin/env python

from __future__ import print_function

import re
import os
try:
    depends_error = False
    from coverage.cmdline import main as coverage_main
    from coveralls import cli as coveralls_cli

    import db_run
    import psql_log
    from pstats_print2list import get_pstats_print2list, print_pstats_list
    from test_server import get_server_path
except ImportError:
    depends_error = True


def print_pstats(sort='cumulative'):
    pstats_list = get_pstats_print2list(
        os.path.expanduser(fname_pstats),
        filter_fnames=[travis_home],
        exclude_fnames=[server_path, 'odoo-profiler', travis_py],
        sort=sort,
        limit=30,
    )
    if not pstats_list:
        return False
    print("Print cProfile sorted by ", sort)
    print_pstats_list(pstats_list)
    return True


def list2param(param, items):
    params = []
    for item in items:
        params.extend([param, item])
    return params


def generate_pgbadger(exclude_regex=None):
    # TODO: Receive the begin and end dates params
    if exclude_regex is None:
        exclude_regex = [
            r"(v.model = 'res\.lang')",
            r"^(INSERT INTO|DELETE FROM|CREATE TEMP TABLE|DROP TABLE|drop table|update|UPDATE)( tmp_ir_translation_import)",  # noqa
            r"^(INSERT INTO|UPDATE ONLY|insert into|update only)( ir_translation)",  # noqa
            r'^(SELECT|select)( \"res_lang\".id FROM \"res_lang\" WHERE )',
            r'^(UPDATE|SELECT|INSERT INTO)( \"ir_module_module\")',
            r'^(UPDATE|SELECT|INSERT INTO)( \"ir_model\")',
            r'^(SELECT "ir_ui_view".id FROM \"ir_model_data\" )',
            r'(from|FROM|update|UPDATE)( wkf)(_|\w)*( )',
            r'^(COPY|COMMIT|SAVEPOINT|commit|copy|savepoint)',
            r'^(INSERT INTO \"ir_attachment\" )',
        ]
    fname_log = psql_log.get_current_log_path()
    if not fname_log:
        print("postgresql log file don't exists.", fname_log)
        return False
    pgbadger_out = os.path.join(
        os.path.expanduser("~"), '.openerp_server.pgbadger')
    extra_params = list2param('--exclude-query', exclude_regex)
    extra_params.extend([
        '--top', '15', '--sample', '2',
        '--disable-type', '--disable-error', '--disable-hourly',
        '--disable-session', '--disable-connection', '--disable-temporary',
        '--maxlength', '400', '--quiet',
    ])
    psql_log.generate_pgbadger_html(
        fname_log, fout=pgbadger_out,
        extra_params=extra_params,
    )
    with open(pgbadger_out) as p_pgbadger_out:
        print("*" * 50, "PGBADGER STATS \n",
              p_pgbadger_out.read(), "\n", "*" * 50,)
    return True

_re_dt_log = re.compile(r'^\d{4}-\d\d-\d\d \d\d:\d\d:\d\d')
from datetime import datetime
def get_time_each_log(logfile):
    dt_obj_new = None
    dt_obj_old = None
    with open(logfile) as f_log:
        for line in f_log:
            match = re.search(_re_dt_log, line)
            if not match:
                continue
            dt_str = match.group(0)
            print(dt_str)
            dt_obj_new = datetime.strptime(dt_str, '%Y-%m-%d %H:%M:%S')
            print(  (dt_obj_new - dt_obj_old).seconds if dt_obj_old else '')
            dt_obj_old = dt_obj_new

get_time_each_log('/Users/moylop260/Downloads/job_20_test_all.txt')

if os.environ.get('TESTS', '0') == '1' and \
        os.environ.get('TEST_ENABLE', '1') == '1' and not depends_error:

    odoo_full = os.environ.get("ODOO_REPO", "odoo/odoo")
    odoo_version = os.environ.get("VERSION")
    travis_home = os.environ.get("HOME", "~/")
    server_path = get_server_path(odoo_full, odoo_version, travis_home)
    travis_py = '/home/travis/virtualenv/python2.7_with_system_site_packages'
    fname_pstats = os.environ.get("FNAME_PSTATS", '~/.openerp_server.stats')

    if print_pstats('cumulative'):
        print_pstats('calls')
        print_pstats('time')
    if os.environ.get('DB_BACKUP', False):
        backup_result = db_run.backup('openerp_template')
        if backup_result:
            print("Backup of database created successfully.")
        else:
            print("Error creating backup of database.")
    if os.environ.get('PG_LOGS_ENABLE', False):
        generate_pgbadger()
    coverage_main(["report", "--show-missing"])
    exit(coveralls_cli.main(argv=None))

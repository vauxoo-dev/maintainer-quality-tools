#!/usr/bin/env python

from __future__ import print_function

import os

from coverage.cmdline import main as coverage_main
from coveralls import cli as coveralls_cli

import db_run
import psql_log
from pstats_print2list import get_pstats_print2list, print_pstats_list
from test_server import get_server_path


odoo_full = os.environ.get("ODOO_REPO", "odoo/odoo")
odoo_version = os.environ.get("VERSION")
travis_home = os.environ.get("HOME", "~/")
server_path = get_server_path(odoo_full, odoo_version, travis_home)
travis_py = '/home/travis/virtualenv/python2.7_with_system_site_packages'
fname_pstats = os.environ.get("FNAME_PSTATS", '~/.openerp_server.stats')


def print_pstats(sort='cumulative'):
    pstats_list = get_pstats_print2list(
        os.path.expanduser(fname_pstats),
        filter_fnames=[travis_home],
        exclude_fnames=[server_path, 'odoo-profiler', travis_py],
        sort=sort,
        limit=30,
    )
    if not pstats_list:
        return False
    print("Print cProfile sorted by ", sort)
    print_pstats_list(pstats_list)
    return True


def generate_pgbadger():
    fname_log = psql_log.get_current_log_path()
    if not fname_log:
        print("postgresql log file don't exists.", fname_log)
        return False
    pgbadger_out = os.path.join(
        os.path.expanduser("~"), '.openerp_server.pgbadger')
    psql_log.generate_pgbadger_html(
        fname_log, fout=pgbadger_out,
        extra_params=[
            '--top', '10', '--sample', '1',
            '--exclude-query', "(v.model = 'res.lang')",
            '--exclude-query', "^(INSERT INTO|DELETE FROM|CREATE TEMP TABLE|DROP TABLE|drop table|update) tmp_ir_translation_import",
            '--exclude-query', "^(INSERT INTO|UPDATE ONLY|insert into|update only) ir_translation",
            '--exclude-query', '^(SELECT \"res_lang\"\.id FROM \"res_lang\" WHERE )',
            # '--begin', '2016-04-04 16:24:12',
            # '--end', '2016-04-04 16:24:13',
            # '--begin', '2016-04-04 16:23:56',
            # '--end', '2016-04-04 16:23:57',
            '--disable-type', '--disable-error', '--disable-hourly',
            '--disable-session', '--disable-connection',
        ],
    )
    with open(pgbadger_out) as p_pgbadger_out:
        print("*" * 50, "PGBADGER STATS \n",
              p_pgbadger_out.read(), "\n", "*" * 50,)
    return True


if os.environ.get('TESTS', '0') == '1' and \
        os.environ.get('TEST_ENABLE', '1') == '1':
    # if print_pstats('cumulative'):
    #     print_pstats('calls')
        # print_pstats('time')
    # if os.environ.get('DB_BACKUP', False):
    #     backup_result = db_run.backup('openerp_template')
    #     if backup_result:
    #         print("Backup of database created successfully.")
        # else:
        #     print("Error creating backup of database.")
    if os.environ.get('PG_LOGS_ENABLE', False):
        generate_pgbadger()
    # coverage_main(["report", "--show-missing"])
    # exit(coveralls_cli.main(argv=None))

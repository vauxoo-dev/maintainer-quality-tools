#!/bin/bash
set -v

if [ "${LINT_CHECK}" != "0" ]; then
    if [ -f "${HOME}/.nvm/nvm.sh" ]; then
        # Update nodejs v6.latest required by eslint
        # Using nvm of travis
        CURRENT_NODE=$(which node)
        source ${HOME}/.nvm/nvm.sh
        nvm install 6
        ln -sf $(nvm which 6) $CURRENT_NODE
    fi
    pip install -q QUnitSuite flake8 Click

    # Install pylint plugin depends without lxml
    wget --no-check-certificate https://raw.githubusercontent.com/vauxoo/pylint-odoo/master/requirements.txt -O $(dirname ${BASH_SOURCE[0]})/pylint_odoo_requirements.txt
    pip install --upgrade -r $(dirname ${BASH_SOURCE[0]})/pylint_odoo_requirements.txt
    pip install --upgrade --no-deps git+https://github.com/vauxoo/pylint-odoo.git   # To use last version ever
    npm install -g eslint  # Extra package for pylint-odoo plugin
    # Get pylint configuration file of vauxoo
    wget -q https://raw.githubusercontent.com/Vauxoo/pylint-conf/master/conf/pylint_vauxoo_light.cfg -O ${HOME}/maintainer-quality-tools/travis/cfg/travis_run_pylint.cfg
    wget -q https://raw.githubusercontent.com/Vauxoo/pylint-conf/master/conf/pylint_vauxoo_light_pr.cfg -O ${HOME}/maintainer-quality-tools/travis/cfg/travis_run_pylint_pr.cfg
    wget -q https://raw.githubusercontent.com/Vauxoo/pylint-conf/master/conf/pylint_vauxoo_light_beta.cfg -O ${HOME}/maintainer-quality-tools/travis/cfg/travis_run_pylint_beta.cfg
    wget -q https://raw.githubusercontent.com/Vauxoo/pylint-conf/master/conf/.jslintrc -O ${HOME}/maintainer-quality-tools/travis/cfg/.jslintrc
    # Ugly patch to apply https://github.com/PyCQA/pylint/pull/1055
    wget -q https://raw.githubusercontent.com/Vauxoo/pylint-conf/master/conf/pylint_pr1055.patch -O /tmp/pylint_pr1055.patch
    patch -f -p0 $(python -c "from __future__ import print_function; from pylint.checkers import similar; print(similar.__file__.rstrip('c'))") -i /tmp/pylint_pr1055.patch
fi

# We can exit here and do nothing if this only a LINT check
if [ "${TESTS}" != "1" ] && [ "${LINT_CHECK}" == "1" ]; then
    exit 0
fi

# For backward compatibility, take version from parameter if it's not globally set
if [ "x${VERSION}" == "x" ] ; then
    VERSION="${1}"
    echo "WARNING: no env variable set for VERSION. Using '${1}'."
fi

if [ "x${ODOO_BRANCH}" == "x" ] ; then
    ODOO_BRANCH=${VERSION}
fi

: ${ODOO_REPO:="odoo/odoo"}  # default value, if not set
IFS="/" read -a REPO <<< "${ODOO_REPO}"
# ODOO_URL="https://github.com/${REPO[0]}/${REPO[1]}/archive/${VERSION}.tar.gz"
ODOO_URL="https://github.com/${REPO[0]}/${REPO[1]}.git"

echo ${REPO_REQUIREMENTS}
export REMOTE=$(python -c "from __future__ import print_function; print('${REPO[0]}'.lower())")
export BRANCH=$(python -c "from __future__ import print_function; print('${ODOO_BRANCH}'.lower())")
export PULL_REQUEST=''
# If the branch is a pull request
if [[ $BRANCH == *"/"*  ]]; then
    export PULL_REQUEST=$BRANCH
    export BRANCH=${BRANCH/\//-}
fi
export ODOO_PATH=${HOME}/${REPO[1]}-${ODOO_BRANCH}

echo "Installing Odoo from cache"
ODOO_URL="https://github.com/${ODOO_REPO}"
if [ "x${REPO_REQUIREMENTS}" == "x"  ] ; then
   export ODOO_PATH=${HOME}/${REPO[1]}-${BRANCH}
else
    chown `(whoami)`:`(whoami)` -R ${REPO_REQUIREMENTS}
    ln -sf ${REPO_REQUIREMENTS}/odoo ${ODOO_PATH}
fi

git init ${ODOO_PATH}
cd ${ODOO_PATH}
git remote add ${REMOTE} ${ODOO_URL}

if [ "x${PULL_REQUEST}" == "x"  ] ; then
    git fetch --depth=1 ${REMOTE} ${ODOO_BRANCH} \
        && git config --local --bool core.bare false \
        && git checkout -b ${ODOO_BRANCH}-${REMOTE} -qf ${REMOTE}/${ODOO_BRANCH} \
    ; git reset --hard ${REMOTE}/${ODOO_BRANCH}
else
    ODOO_URL="https://github.com/${ODOO_REPO}"
    # Is a pull request
    git reset --hard
    git fetch --depth=1 ${REMOTE} $PULL_REQUEST/head:${BRANCH}-${REMOTE} \
        && git config --local --bool core.bare false \
        && git checkout ${BRANCH}-${REMOTE} \
    ;
fi

echo "x${PHANTOMJS_TESTS}"
if [ "x${PHANTOMJS_TESTS}" == "x0" ]; then
    # Disable phantom tests
    sed -i "s/'phantomjs'/'disable_phantomjs'/g" ${HOME}/*/openerp/tests/common.py
else
    # Increase default timeout of all phantom tests
    sed -i "s/ login=None, timeout=60, / login=None, timeout=360, /g" ${HOME}/*/openerp/tests/common.py
    # Increase default delay of all phantom tests
    sed -i "s/defaultDelay: 50,/defaultDelay: 120,/g" ${HOME}/*/addons/web/static/src/js/tour.js
fi


if [ ${PHANTOMJS_VERSION+x} ]; then
    echo "Installing phantomjs-${PHANTOMJS_VERSION}"
    wget -qO - https://bitbucket.org/ariya/phantomjs/downloads/phantomjs-${PHANTOMJS_VERSION}-linux-x86_64.tar.bz2 | tar -xj -C /tmp
    cp /tmp/phantomjs-${PHANTOMJS_VERSION}*/bin/phantomjs ${HOME}/maintainer-quality-tools/travis/
    phantomjs --version
fi

# Workaround to force using system site packages (see https://github.com/Shippable/support/issues/241#issuecomment-57947925)
rm -f $VIRTUAL_ENV/lib/python2.7/no-global-site-packages.txt

echo "Installing odoo dependencies"
# Odoo <= 7.0 don't have requirements.txt file then the 8.0 file is used by default
if [ ! -f ${ODOO_PATH}/requirements.txt ]; then
   wget https://raw.githubusercontent.com/odoo/odoo/8.0/requirements.txt -O ${ODOO_PATH}/requirements.txt
fi
# Remove python-ldap from odoo requirements because is not a common module used
sed -i '/^python-ldap\=\=/d' ${ODOO_PATH}/requirements.txt
# Use requests with [security] suffix to fix [Errno 111] Connection refused for old python2.7 versions.
sed -i 's/^requests\=\=/requests[security]\=\=/g' ${ODOO_PATH}/requirements.txt

pip install --upgrade pip
pip install -q --no-binary pycparser -r ${ODOO_PATH}/requirements.txt

if [ "x${WITHOUT_DEPENDENCIES}" == "x" ] ; then
    echo "Installing dependencies"
    pip install -q --no-binary pycparser -r ${HOME}/maintainer-quality-tools/requirements.txt

    pip install -q QUnitSuite coveralls codecov

    pip install pstats_print2list
    pip install certifi
    pip install -U urllib3[secure] setuptools==33.1.1
    pip install ndg-httpsclient

    #  Install new dependence: npm package
    wget -qO- https://deb.nodesource.com/setup | sudo bash -
    apt-get install nodejs
    npm install -g less
    npm install -g less-plugin-clean-css
fi

echo "Getting addons dependencies"
clone_oca_dependencies ${HOME} ${TRAVIS_BUILD_DIR}/..
clone_result=$?
if [ "$clone_result" != "0"  ]; then
    echo "Error cloning dependencies"
    exit $clone_result
fi;

# if [[ "$VERSION" == "10.0"  && -z "$NO_EXTRA_REPOS" ]]; then
 # Install profiler module
 #Â TODO: Fix error using runbot testing for vx/mexico#10.0
 # git clone --single-branch --depth=1 https://github.com/Vauxoo/odoo-profiler.git -b ${VERSION} ${HOME}/odoo-profiler \
 #   && sed -i "s/'auto_install': False/'auto_install': True/g" ${HOME}/odoo-profiler/profiler/__manifest__.py

 # Install web ribbon
# git clone --single-branch --depth=1 https://github.com/OCA/web.git -b ${VERSION} ${HOME}/web-environment-ribbon-isolated \
#    && sed -i 's/"auto_install": False/"auto_install": True/g' ${HOME}/web-environment-ribbon-isolated/web_environment_ribbon/__manifest__.py \
#    && sed -i 's/TEST/DEVELOPMENT/g' ${HOME}/web-environment-ribbon-isolated/web_environment_ribbon/data/ribbon_data.xml \
#    && find ${HOME}/web-environment-ribbon-isolated/web_environment_ribbon -type f ! -name "__init__.py" -exec sed -i "s/web_environment_ribbon/web_environment_ribbon_isolated/g" {} \; \
#    && (cd ${HOME}/web-environment-ribbon-isolated; rm -rf $(ls | grep -v web_environment_ribbon$); mv web_environment_ribbon web_environment_ribbon_isolated )

 # Install odoolint module
 # Install module that disable html in the logs
#    echo "Install odoo lint SQA isolated"
#    git clone --single-branch --depth=1 https://github.com/vauxoo/server-tools.git -b ${VERSION} ${HOME}/odoolintsqa
#    (cd ${HOME}/odoolintsqa; mv odoolint odoolint_isolated; mv tour_hide_dom_log tour_hide_dom_log_isolated; rm -rf $(ls | grep -v '_isolated'))
#    sed -i 's/"auto_install": False/"auto_install": True/g' ${HOME}/odoolintsqa/*/__manifest__.py
#    sed -i "s/'auto_install': False/'auto_install': True/g" ${HOME}/odoolintsqa/*/__manifest__.py
#    sed -i 's/tour_hide_dom_log/tour_hide_dom_log_isolated/g' ${HOME}/odoolintsqa/tour_hide_dom_log_isolated/views/assets.xml
# fi;

if [[ "$VERSION" == "8.0"  && -z "$NO_EXTRA_REPOS" ]]; then
 # Install web ribbon
 git clone --single-branch --depth=1 https://github.com/OCA/web.git -b ${VERSION} ${HOME}/web-environment-ribbon-isolated \
    && sed -i 's/"auto_install": False/"auto_install": True/g' ${HOME}/web-environment-ribbon-isolated/web_environment_ribbon/__openerp__.py \
    && sed -i 's/TEST/DEVELOPMENT/g' ${HOME}/web-environment-ribbon-isolated/web_environment_ribbon/data/ribbon_data.xml \
    && find ${HOME}/web-environment-ribbon-isolated/web_environment_ribbon -type f ! -name "__init__.py" -exec sed -i "s/web_environment_ribbon/web_environment_ribbon_isolated/g" {} \; \
    && (cd ${HOME}/web-environment-ribbon-isolated; rm -rf $(ls | grep -v web_environment_ribbon$); mv web_environment_ribbon web_environment_ribbon_isolated )

 # Install profiler module
 git clone --single-branch --depth=1 https://github.com/Vauxoo/odoo-profiler.git -b ${VERSION} ${HOME}/odoo-profiler \
    && sed -i "s/'auto_install': False/'auto_install': True/g" ${HOME}/odoo-profiler/profiler/__openerp__.py \

 # Install odoolint module
 # Install module that disable html in the logs
    echo "Install odoo lint SQA isolated"
    git clone --single-branch --depth=1 https://github.com/vauxoo/server-tools.git -b ${VERSION} ${HOME}/odoolintsqa
    (cd ${HOME}/odoolintsqa; mv odoolint odoolint_isolated; mv tour_hide_dom_log tour_hide_dom_log_isolated; rm -rf $(ls | grep -v '_isolated'))
    sed -i 's/"auto_install": False/"auto_install": True/g' ${HOME}/odoolintsqa/*/__openerp__.py
    sed -i "s/'auto_install': False/'auto_install': True/g" ${HOME}/odoolintsqa/*/__openerp__.py
    sed -i 's/tour_hide_dom_log/tour_hide_dom_log_isolated/g' ${HOME}/odoolintsqa/tour_hide_dom_log_isolated/views/assets.xml
fi;

# Use reference .coveragerc
cp ${HOME}/maintainer-quality-tools/cfg/.coveragerc ${TRAVIS_BUILD_DIR}

# Expected directory structure:
#
#    HOME/
#     |___ <OdooRepo>-<Branch>/         <-- Odoo Server
#     |___ maintainer-quality-tools/
#     |___ build/<Owner>/<TestedRepo>/
#     |___ <DependencyRepo1>/
#     |___ <DependencyRepo2>/
#     |...
echo "Content of ${HOME}:"
ls -l ${HOME}

if [ "x${WKHTMLTOPDF_VERSION}" == "x" ] ; then
    WKHTMLTOPDF_VERSION="0.12.3"
fi
echo "Installing the version of webkit ${WKHTMLTOPDF_VERSION}"

if [[ ${WKHTMLTOPDF_VERSION} == "0.12.1" ]]
then
    cd ${HOME}/maintainer-quality-tools/travis/
    BINARY=wkhtmltox-${WKHTMLTOPDF_VERSION}_linux-wheezy-amd64.deb
    wget --timeout=240 https://github.com/wkhtmltopdf/wkhtmltopdf/releases/download/${WKHTMLTOPDF_VERSION}/${BINARY} 
    dpkg -x ${BINARY} data.tar.xz
    mv data.tar.xz/usr/local/bin/wkhtmltopdf .
    chmod +x wkhtmltopdf
    rm -rf ${BINARY} data.tar.xz

else
    (cd ${HOME}/maintainer-quality-tools/travis/ && wget -O- -t 1 --timeout=240 https://github.com/wkhtmltopdf/wkhtmltopdf/releases/download/${WKHTMLTOPDF_VERSION}/wkhtmltox-${WKHTMLTOPDF_VERSION}_linux-generic-amd64.tar.xz | tar -xJ --strip-components=2 wkhtmltox/bin/wkhtmltopdf)
fi

wkhtmltopdf -V

if [ "$PG_LOGS_ENABLE" == "1" ]; then
    python $(dirname ${BASH_SOURCE[0]})/psql_log.py
fi

exit 0

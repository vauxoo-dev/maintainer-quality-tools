#!/bin/bash
set -v

if [ "${LINT_CHECK}" != "0" ]; then
    pip install -q QUnitSuite flake8 Click

    # pylint plugin depends
    wget -q https://raw.githubusercontent.com/vauxoo/pylint-odoo/master/requirements.txt -O ${HOME}/maintainer-quality-tools/travis/pylint_odoo_requirements.txt
    find -L ${HOME}/maintainer-quality-tools/travis -name pylint_odoo_requirements.txt -exec sed -i '/lxml/d'  {} \;  #  lxml depends is too slow
    pip install --upgrade -r ${HOME}/maintainer-quality-tools/travis/pylint_odoo_requirements.txt
    pip install --upgrade --pre --no-deps git+https://github.com/vauxoo/pylint-odoo.git   # To test last developer version ever
    npm install -g jshint  # To oca-pylint-plugin
    # First install show error and second time install fine!
    npm install -g jshint  # To oca-pylint-plugin
    npm install -g jshint  # To oca-pylint-plugin
    # Get pylint configuration file of vauxoo
    wget -q https://raw.githubusercontent.com/Vauxoo/pylint-conf/master/conf/pylint_vauxoo_light.cfg -O ${HOME}/maintainer-quality-tools/travis/cfg/travis_run_pylint.cfg
    wget -q https://raw.githubusercontent.com/Vauxoo/pylint-conf/master/conf/pylint_vauxoo_light_pr.cfg -O ${HOME}/maintainer-quality-tools/travis/cfg/travis_run_pylint_pr.cfg
fi

## We can exit here and do nothing if this only a LINT check
if [ "${TESTS}" != "1" ] && [ "${LINT_CHECK}" == "1" ]; then
    exit 0
fi

# For backward compatibility, take version from parameter if it's not globally set
if [ "x${VERSION}" == "x" ] ; then
    VERSION="${1}"
    echo "WARNING: no env variable set for VERSION. Using '${1}'."
fi

: ${ODOO_REPO:="odoo/odoo"}  # default value, if not set
IFS="/" read -a REPO <<< "${ODOO_REPO}"
ODOO_URL="https://github.com/${REPO[0]}/${REPO[1]}/archive/${VERSION}.tar.gz"
#ODOO_URL="https://github.com/${REPO[0]}/${REPO[1]}.git"

echo ${REPO_REQUIREMENTS}

if [ "x${REPO_REQUIREMENTS}" == "x" ] ; then
    echo "Installing Odoo ${ODOO_URL}"
    wget -nv -O odoo.tar.gz ${ODOO_URL}
    tar -xf odoo.tar.gz -C ${HOME}
    #git_update ${ODOO_URL} -b ${VERSION} ${HOME}/${REPO[0]}-${VERSION}
else
    echo "Installing Odoo from cache"
    export REMOTE=$(python -c "print '${REPO[0]}'.lower()")
    export BRANCH=$(python -c "print '${VERSION}'.lower()")
    export ODOO_PATH=${HOME}/${REPO[1]}-${BRANCH}
    chown `(whoami)`:`(whoami)` -R ${REPO_REQUIREMENTS}
    ln -sf ${REPO_REQUIREMENTS}/odoo ${ODOO_PATH}
    cd ${ODOO_PATH} \
       && git fetch ${REMOTE} ${BRANCH} \
       && git checkout -b ${BRANCH}-${REMOTE} -qf ${REMOTE}/${BRANCH}
fi

echo "x${PHANTOMJS_TESTS}"
if [ "x${PHANTOMJS_TESTS}" == "x0" ]; then
    # Disable phantom tests
    find -L ${HOME} -name common.py -exec sed -i "s/'phantomjs'/'disable_phantomjs'/g" {} \;
else
    # Increase default timeout of all phantom tests
    find -L ${HOME} -name common.py -exec sed -i "s/ login=None, timeout=60, / login=None, timeout=360, /g" {} \;
fi

pip install coveralls  # ToDo: Add to main image because in travis is installed
pip install pstats_print2list
if [ "x${WITHOUT_DEPENDENCIES}" == "x" ] ; then
    echo "Installing dependencies"
    apt-get -q -y install expect-dev  # provides unbuffer utility
    apt-get -q -y install python-lxml  # because pip installation is slooow

    pip install -q QUnitSuite flake8 coveralls pylint
    pip install -q -r $(dirname ${BASH_SOURCE[0]})/requirements.txt

    #  Install new dependence: npm package
    wget -qO- https://deb.nodesource.com/setup | sudo bash -
    apt-get install nodejs
    npm install -g less
    npm install -g less-plugin-clean-css

fi

echo "Getting addons dependencies"
clone_oca_dependencies ${HOME} ${TRAVIS_BUILD_DIR}/..

# Install web ribbon
git clone --single-branch --depth=1 https://github.com/OCA/web.git -b ${VERSION} ${HOME}/web-environment-ribbon-isolated \
    && sed -i 's/"auto_install": False/"auto_install": True/g' ${HOME}/web-environment-ribbon-isolated/web_environment_ribbon/__openerp__.py \
    && sed -i 's/TEST/DEVELOPMENT/g' ${HOME}/web-environment-ribbon-isolated/web_environment_ribbon/data/ribbon_data.xml \
    && find ${HOME}/web-environment-ribbon-isolated/web_environment_ribbon -type f -exec sed -i "s/web_environment_ribbon/web_environment_ribbon_isolated/g" {} \; \
    && (cd ${HOME}/web-environment-ribbon-isolated; rm -rf $(ls | grep -v web_environment_ribbon$); mv web_environment_ribbon web_environment_ribbon_isolated )

# Install profiler module
git clone --single-branch --depth=1 https://github.com/Vauxoo/odoo-profiler.git -b ${VERSION} ${HOME}/odoo-profiler \
    && sed -i "s/'auto_install': False/'auto_install': True/g" ${HOME}/odoo-profiler/profiler/__openerp__.py \
    && sed -i "s/return new_api/with profiling(): return new_api/g" ${ODOO_PATH}/openerp/api.py \
    && sed -i "s/return old_api/with profiling(): return old_api/g" ${ODOO_PATH}/openerp/api.py \
    && sed -i "/# avoid hasattr/a \ \ \ \ \ \ \ \ from openerp.addons.profiler import profiling" ${ODOO_PATH}/openerp/api.py

# Workaround to force using system site packages (see https://github.com/Shippable/support/issues/241#issuecomment-57947925)
rm -f $VIRTUAL_ENV/lib/python2.7/no-global-site-packages.txt

pip install --user -q -r $(dirname ${BASH_SOURCE[0]})/requirements.txt

# Use reference .coveragerc
cp ${HOME}/maintainer-quality-tools/cfg/.coveragerc ${TRAVIS_BUILD_DIR}

$(dirname ${BASH_SOURCE[0]})/shippable_install_nightly


# Expected directory structure:
#
#    HOME/
#     |___ <OdooRepo>-<Branch>/         <-- Odoo Server
#     |___ maintainer-quality-tools/
#     |___ build/<Owner>/<TestedRepo>/
#     |___ <DependencyRepo1>/
#     |___ <DependencyRepo2>/
#     |...
echo "Content of ${HOME}:"
ls -l ${HOME}

#!/bin/bash

set -v

if [ "x${WITHOUT_DEPENDENCIES}" == "x" ] ; then
    echo "Install webkit and patched process"
    sudo apt-get install wkhtmltopdf
    mkdir -p /tmp/webkit_patched
    wget -O /tmp/webkit_patched/wkhtmltopdf.tar.bz2 https://wkhtmltopdf.googlecode.com/files/wkhtmltopdf-0.11.0_rc1-static-amd64.tar.bz2
    bzip2 -dc /tmp/webkit_patched/wkhtmltopdf.tar.bz2 | tar -xvO >/tmp/webkit_patched/webkit-patched
    sudo cp /tmp/webkit_patched/webkit-patched /usr/bin/wkhtmltopdf
fi

python $(dirname ${BASH_SOURCE[0]})/enable_psql_logs

exit 0
